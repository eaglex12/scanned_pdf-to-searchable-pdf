import os
import subprocess
from PyPDF2 import PdfMerger

def convert_pdf_to_images(pdf_file, output_image_prefix, density=300):
    """
    Converts a multi-page PDF into images using ImageMagick's `magick` command.
    
    :param pdf_file: The path to the PDF file.
    :param output_image_prefix: The prefix for the output image files (e.g., 'image-%03d.png').
    :param density: The DPI for image conversion (default is 300).
    :return: List of generated image files.
    """
    output_pattern = f"{output_image_prefix}-%03d.png"
    command = [
        "magick", 
        "-density", str(density),
        pdf_file,
        output_pattern
    ]
    
    try:
        subprocess.run(command, check=True)
        print(f"PDF successfully converted to images with prefix: {output_image_prefix}")
    except subprocess.CalledProcessError as e:
        print(f"Error in converting PDF to images: {e}")
        return []

    # Find all generated image files
    image_files = [f for f in os.listdir('.') if f.startswith(output_image_prefix) and f.endswith('.png')]
    return sorted(image_files)

def create_searchable_pdf(image_files, temp_pdf_prefix):
    """
    Runs Tesseract on each image file to generate individual searchable PDFs.
    
    :param image_files: List of image files.
    :param temp_pdf_prefix: The prefix for temporary PDF files.
    :return: List of temporary PDF files created by Tesseract.
    """
    temp_pdfs = []
    for i, image_file in enumerate(image_files):
        temp_pdf_file = f"{temp_pdf_prefix}_page_{i+1}.pdf"
        command = ["tesseract", image_file, temp_pdf_file.replace('.pdf', ''), "pdf"]
        
        try:
            subprocess.run(command, check=True)
            print(f"Searchable PDF created for {image_file}.")
            temp_pdfs.append(temp_pdf_file)
        except subprocess.CalledProcessError as e:
            print(f"Error in creating searchable PDF for {image_file}: {e}")
    
    return temp_pdfs

def merge_pdfs(temp_pdfs, output_pdf_file):
    """
    Merges multiple PDFs into a single PDF using PyPDF2.
    
    :param temp_pdfs: List of individual temporary PDF files to merge.
    :param output_pdf_file: The output file path for the merged PDF.
    :return: None
    """
    merger = PdfMerger()

    for temp_pdf in temp_pdfs:
        try:
            merger.append(temp_pdf)
            print(f"Added {temp_pdf} to final PDF.")
        except Exception as e:
            print(f"Error adding {temp_pdf}: {e}")

    with open(output_pdf_file, "wb") as output_file:
        merger.write(output_file)

    merger.close()
    print(f"Final searchable PDF created: {output_pdf_file}")

    # Cleanup temporary PDFs
    for temp_pdf in temp_pdfs:
        os.remove(temp_pdf)
        print(f"Removed temporary file: {temp_pdf}")

def run_tesseract_on_images(image_files, output_text_prefix):
    """
    Runs Tesseract on each image file to extract text.
    
    :param image_files: List of image files.
    :param output_text_prefix: The prefix for the output text files (e.g., 'output_page').
    :return: None
    """
    for i, image_file in enumerate(image_files):
        output_file = f"{output_text_prefix}_page_{i+1}.txt"
        command = ["tesseract", image_file, output_file.replace('.txt', '')]
        
        try:
            subprocess.run(command, check=True)
            print(f"OCR completed for {image_file}. Text saved to {output_file}.")
        except subprocess.CalledProcessError as e:
            print(f"Error in running Tesseract on {image_file}: {e}")

def combine_text_files(output_text_prefix, num_pages, combined_output_file):
    """
    Combines individual text files into a single output file.
    
    :param output_text_prefix: The prefix of the text files generated by Tesseract.
    :param num_pages: The number of pages to combine.
    :param combined_output_file: The path to the combined output text file.
    :return: None
    """
    with open(combined_output_file, 'w') as outfile:
        for i in range(1, num_pages + 1):
            text_file = f"{output_text_prefix}_page_{i}.txt"
            if os.path.exists(text_file):
                with open(text_file, 'r') as infile:
                    outfile.write(infile.read())
                    outfile.write("\n\n")  # Separate each page's text with newlines
    
    print(f"All text files combined into {combined_output_file}")

if __name__ == "__main__":
    # Define file paths and prefixes
    pdf_file = "3.0_Redacted.pdf"
    output_image_prefix = "3.0_Redacted"
    output_text_prefix = "ocr_output"
    temp_pdf_prefix = "temp_searchable"
    combined_text_file = "combined_text_output.txt"
    output_pdf_file = "searchable_output.pdf"
    
    # Step 1: Convert PDF to images
    image_files = convert_pdf_to_images(pdf_file, output_image_prefix, density=300)

    if not image_files:
        print("No images generated. Exiting.")
    else:
        # Step 2: Extract text from images
        run_tesseract_on_images(image_files, output_text_prefix)
        
        # Combine individual text files into a single text file
        combine_text_files(output_text_prefix, len(image_files), combined_text_file)

        # Step 3: Create individual searchable PDFs from images
        temp_pdfs = create_searchable_pdf(image_files, temp_pdf_prefix)
        
        # Step 4: Merge all individual searchable PDFs into one final PDF
        merge_pdfs(temp_pdfs, output_pdf_file)
        
        print(f"Searchable PDF created: {output_pdf_file}")
        print(f"Combined text file created: {combined_text_file}")
